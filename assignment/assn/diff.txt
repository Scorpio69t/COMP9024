diff --git a/assignment/assn/graph.c b/assignment/assn/graph.c
index d73f58f..7140c84 100644
--- a/assignment/assn/graph.c
+++ b/assignment/assn/graph.c
@@ -6,15 +6,15 @@
 #include "graph.h"
 #include "list.h"
 
-typedef struct Node {
+typedef struct ListNode {
     string vertex;
     int weight;
-    struct Node *next;
-} Node ;
+    struct ListNode *next;
+} ListNode ;
 
 typedef struct Graph_Repr {
-    Node **edges; // Adjacency list storing positive weights and vertex label
-    int nV;  // Number of vertices
+    ListNode **edges;
+    int nV;
 } Graph_Repr;
 
 graph graph_create(void) {
@@ -47,15 +47,15 @@ void graph_show(graph g, FILE *f, list L){
         }
         int i;
         for (i=0; i<g->nV; i++) {
-            Node *vertex = g->edges[i];
+            ListNode *vertex = g->edges[i];
             if (!list_contains(L, vertex->vertex)) {
                 fprintf(f, "%s\n", vertex->vertex);
             }
         }
         list dest = list_create();
         for (i=0; i<g->nV; i++) {
-            Node *vertex = g->edges[i];
-            Node *adj;
+            ListNode *vertex = g->edges[i];
+            ListNode *adj;
             if (!list_contains(L, vertex->vertex)) {
                 for (adj = vertex->next; adj!=NULL; adj=adj->next) {
                     if (!list_contains(L, adj->vertex)) {
@@ -76,16 +76,13 @@ void graph_show(graph g, FILE *f, list L){
 
 void graph_add_vertex(graph g, string vertex) {
     if (g != NULL && vertex != NULL && !graph_has_vertex(g, vertex) ) {
-        Node *new_vertex = malloc(sizeof(Node));
+        ListNode *new_vertex = malloc(sizeof(ListNode));
         assert(new_vertex != NULL);
-        //Labelling vertex to new_vertex
         size_t vertex_leng = strlen(vertex);
         new_vertex->vertex = malloc((vertex_leng+1)*sizeof(char));
         strcpy(new_vertex->vertex, vertex);
-
         new_vertex->next = NULL;
-        // allocate memory for each row
-        g->edges = malloc((g->nV + 1) * sizeof(Node *));
+        g->edges = (ListNode **)realloc(g->edges, (g->nV + 1) * sizeof(ListNode *));
         assert(g->edges != NULL);
         g->edges[g->nV] = new_vertex;
         g->nV++;
@@ -111,9 +108,9 @@ size_t graph_vertices_count(graph g) {
 
 void graph_add_edge(graph g, string v, string w, size_t weight) {
     if (g!=NULL && v!=NULL && w!=NULL && !graph_has_edge(g, v, w)) {
-        Node *src_node = NULL;
-        Node *dest_node = NULL;
-        Node *new_edge = malloc(sizeof(Node));
+        ListNode *src_node = NULL;
+        ListNode *dest_node = NULL;
+        ListNode *new_edge = (ListNode *)malloc(sizeof(ListNode));
         assert(new_edge!=NULL);
         for (int i = 0; i < g->nV; ++i) {
             if (strcmp(g->edges[i]->vertex, v) == 0) {
@@ -135,9 +132,9 @@ bool graph_has_edge(graph g, string source, string dest) {
 
     for (int i = 0; i < g->nV; ++i) {
         if (strcmp(g->edges[i]->vertex, source) == 0) {
-            Node *src_node = g->edges[i];
+            ListNode *src_node = g->edges[i];
             
-            for (Node *adj = src_node->next; adj != NULL; adj = adj->next) {
+            for (ListNode *adj = src_node->next; adj != NULL; adj = adj->next) {
                 if (strcmp(adj->vertex, dest) == 0) {
                     return true;
                 }
@@ -152,8 +149,8 @@ void graph_set_edge(graph g, string v, string w, size_t weight) {
     if (g!=NULL && v!=NULL && w!=NULL && graph_has_edge(g, v, w)) {
         for (int i = 0; i < g->nV; ++i) {
             if (strcmp(g->edges[i]->vertex, v) == 0) {
-                Node *src_node = g->edges[i];
-                for (Node *adj = src_node->next; adj != NULL; adj = adj->next) {
+                ListNode *src_node = g->edges[i];
+                for (ListNode *adj = src_node->next; adj != NULL; adj = adj->next) {
                     if (strcmp(adj->vertex, w) == 0) {
                         adj->weight = weight;
                         return; 
@@ -169,9 +166,9 @@ size_t graph_get_edge(graph g, string source, string dest) {
     if (g == NULL || source == NULL || dest == NULL) return 0;
     for (int i = 0; i < g->nV; ++i) {
         if (strcmp(g->edges[i]->vertex, source) == 0) {
-            Node *src_node = g->edges[i];
+            ListNode *src_node = g->edges[i];
             
-            for (Node *adj = src_node->next; adj != NULL; adj = adj->next) {
+            for (ListNode *adj = src_node->next; adj != NULL; adj = adj->next) {
                 if (strcmp(adj->vertex, dest) == 0) {
                     return adj->weight;
                 }
@@ -187,8 +184,8 @@ size_t graph_edges_count(graph g, string vertex) {
     for (int i = 0; i < g->nV; ++i) {
         if (strcmp(g->edges[i]->vertex, vertex) == 0) {
             size_t count = 0;
-            Node *src_node = g->edges[i];
-            for (Node *adj = src_node->next; adj != NULL; adj = adj->next) {
+            ListNode *src_node = g->edges[i];
+            for (ListNode *adj = src_node->next; adj != NULL; adj = adj->next) {
                 ++count;
             }
             return count;
